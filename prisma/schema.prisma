generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type TierlistsTier {
  label  String
  value  Int
  movies String[]
}

model Tierlists {
  id     String          @id @default(auto()) @map("_id") @db.ObjectId
  tiers  TierlistsTier[]
  userId String          @unique @db.ObjectId
  user   User?           @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String?
  expires_at        Int?
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  scope             String?
  token_type        String?
  type              String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Shortlist {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  movieIDs          String[] @db.ObjectId
  movies            Movie[]  @relation(fields: [movieIDs], references: [id])
  isReady           Boolean  @default(false)
  requiresSelection Boolean? @default(false)
  selectedIndex     Int?
  participating     Boolean  @default(true)

  @@map("shortlist")
}

model Movie {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  adult             Boolean
  backdrop_path     String?        @default("")
  genre_ids         Int[]
  tmdbId            Int            @unique
  imdbId            String?
  original_language String
  original_title    String
  overview          String
  popularity        Float
  poster_path       String?        @default("")
  release_date      String
  title             String
  video             Boolean
  vote_average      Float
  vote_count        Int
  movieOfTheWeek    DateTime?
  watchDate         String?
  user              User?          @relation(fields: [userId], references: [id])
  shortlists        Shortlist[]    @relation(fields: [shortlistIDs], references: [id])
  shortlistIDs      String[]       @db.ObjectId
  ratings           Rating[]
  reviews           Review[]
  userId            String?        @db.ObjectId
  raffles           Raffle[]       @relation(fields: [raffleIDs], references: [id])
  raffleIDs         String[]       @db.ObjectId
  runtime           Int?
  genres            Genre[]
  tagline           String?
  watchProviders    WatchProvider?
  images            Images?
  videos            Video[]
  cast              CastMember[]

  @@map("movies")
}

type CastMember {
  adult                Boolean
  gender               Int
  id                   Int
  known_for_department String
  name                 String
  original_name        String
  popularity           Float
  profile_path         String?
  cast_id              Int
  character            String
  credit_id            String
  order                Int
}

type WatchProvider {
  flatrate Provider[]
  link     String
}

type Provider {
  logo_path        String
  provider_id      Int
  provider_name    String
  display_priority Int
}

type Images {
  backdrops SingleImage[]
  posters   SingleImage[]
  logos     SingleImage[]
}

type SingleImage {
  aspect_ratio Float
  file_path    String
  height       Int
  width        Int
  iso_639_1    String?
  vote_average Float
  vote_count   Int
}

type Video {
  iso_639_1    String
  iso_3166_1   String
  name         String
  key          String
  site         String
  size         Int
  type         String
  official     Boolean
  published_at String
  id           String
}

model Rating {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Float
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  movieId String @db.ObjectId
  movie   Movie  @relation(fields: [movieId], references: [id])
}

model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  movieId   String @db.ObjectId
  movie     Movie  @relation(fields: [movieId], references: [id])
  timestamp String
}

type Genre {
  id   Int
  name String
}

enum Trailer {
  name
  id
  key
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String     @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  emailVerified DateTime?
  image         String
  name          String
  sessionId     String?
  accountId     Int?
  shortlist     Shortlist?
  shortlistId   String?    @db.ObjectId
  tierlistId    String?    @db.ObjectId
  accounts      Account[]
  tierlist      Tierlists?
  ratings       Rating[]
  reviews       Review[]
  movies        Movie[]
  Raffle        Raffle[]   @relation(fields: [raffleIDs], references: [id])
  raffleIDs     String[]   @db.ObjectId
  sessions      Session[]

  @@map("users")
}

model Session {
  id        String   @id @map("_id")
  userId    String   @db.ObjectId
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Raffle {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  participants   User[]   @relation(fields: [participantIDs], references: [id])
  participantIDs String[] @db.ObjectId
  movieIDs       String[] @db.ObjectId
  movies         Movie[]  @relation(fields: [movieIDs], references: [id])
  winningMovieID String   @db.ObjectId
  date           String
}
