generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator json {
  provider = "node node_modules/prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tierlist {
  id        String   @id @default(uuid())
  tiers     Tier[] 
  tierIds   String[]
  userId    String   
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?
  /// [WatchdateFilter]
  watchDate Json?
  genres    String[]
}

model Tier {
  id         String          @id @default(uuid())
  label      String
  value      Int
  tierlist   Tierlist        @relation(fields: [tierlistId], references: [id], onDelete: Cascade)
  tierlistId String
  movies     MoviesOnTiers[]
}

model MoviesOnTiers {
  id       String @id @default(uuid())
  position Int
  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId  String
  tier     Tier   @relation(fields: [tierId], references: [id], onDelete: Cascade)
  tierId   String

  @@unique([movieId, tierId])
}

model Account {
  id                String  @id @default(uuid())
  access_token      String?
  expires_at        Int?
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  scope             String?
  token_type        String?
  type              String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Shortlist {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieIDs          String[]
  movies            Movie[]
  isReady           Boolean  @default(false)
  requiresSelection Boolean? @default(false)
  selectedIndex     Int?
  participating     Boolean  @default(true)
}

model Movie {
  id                    String             @id @default(uuid())
  adult                 Boolean
  backdrop_path         String?            @default("")
  genre_ids             Int[]
  tmdbId                Int                @unique
  imdbId                String?
  original_language     String
  original_title        String
  overview              String
  popularity            Float
  poster_path           String?            @default("")
  release_date          String
  title                 String
  video                 Boolean
  vote_average          Float
  vote_count            Int
  movieOfTheWeek        DateTime?
  watchDate             String?
  user                  User?              @relation(fields: [userId], references: [id])
  shortlists            Shortlist[]
  shortlistIDs          String[]
  reviews               Review[]
  userId                String?
  raffles               Raffle[]
  raffleIDs             String[]
  runtime               Int?
  genres                String[]
  tagline               String?
  /// [WatchProvidersType]
  watchProviders        Json?
  /// [Images]
  images                Json?
  /// [Videos]
  videos                Json?
  /// [CastMembers]
  cast                  Json?
  /// [CrewMembers]
  crew                  Json?
  tiers                 MoviesOnTiers[]
  tierIds               String[]
  recommendations       RecommendedMovie[] @relation("recommendedMovie")
  sourceRecommendations RecommendedMovie[] @relation("sourceMovieRelation")
}

model Review {
  id        String @id @default(uuid())
  content   String
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  movieId   String
  movie     Movie  @relation(fields: [movieId], references: [id])
  timestamp String
  rating    Float
}

enum Trailer {
  name
  id
  key
}

model User {
  id              String             @id @default(uuid())
  email           String             @unique
  /// Could not determine type: the field only had null or empty values in the sample set.
  emailVerified   DateTime?
  image           String
  name            String
  sessionId       String?
  accountId       Int?
  shortlist       Shortlist?
  shortlistId     String?
  accounts        Account[]
  tierlists       Tierlist[]
  reviews         Review[]
  movies          Movie[]
  raffle          Raffle[]
  raffleIDs       String[]
  sessions        Session[]
  recommendations RecommendedMovie[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Raffle {
  id             String   @id @default(uuid())
  participants   User[]
  participantIDs String[]
  movieIDs       String[]
  movies         Movie[]
  winningMovieID String
  date           String
}

model RecommendedMovie {
  id            String @id @default(uuid())
  movie         Movie  @relation("recommendedMovie", fields: [movieId], references: [id], onDelete: SetDefault)
  movieId       String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  sourceMovie   Movie  @relation("sourceMovieRelation", fields: [sourceMovieId], references: [id])
  sourceMovieId String

  @@unique([movieId, userId, sourceMovieId])
}

model SiteConfig {
  id             String @id @default(uuid())
  /// [ConfigProviders]
  watchProviders Json?
  watchWeekDay   String
}
